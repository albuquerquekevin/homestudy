 PROCEDURE SP_P_AGENDAS_INSERT_MULTIPLO (
    PAGE_IDE IN P_AGENDAS.AGE_IDE%TYPE,
    PPRO_IDE IN P_AGENDAS.AGE_PRO_IDE%TYPE,
    PAGE_DTA IN P_AGENDAS.AGE_DTA_PRE%TYPE,
    PHOR_PRE IN P_AGENDAS.AGE_HOR_PRE%TYPE,
    PTAG_IDE IN P_AGENDAS.AGE_TAG_IDE%TYPE,
    PSTA_IDE in P_AGENDAS.AGE_STA_IDE%TYPE,
    PAGE_DSC IN P_AGENDAS.AGE_DSC%TYPE,
    PCON_IDE IN P_AGENDAS.AGE_CON_IDE%TYPE,
    PREV_IDE IN P_AGENDAS.AGE_REV_IDE%TYPE,
    PFLG_PRI IN P_AGENDAS.AGE_FLG_PRI%TYPE,
	PFLG_AUT IN P_AGENDAS.AGE_FLG_AUT%TYPE,
	PSTA_IDE_ARRAY IN VARCHAR2(80),
    PRETORNO OUT SYS_REFCURSOR) IS
    VAGE_IDE P_AGENDAS.AGE_IDE%TYPE;
	VAGE_DTA_PRE P_AGENDAS.AGE_DTA_BAS%TYPE;
    VCOUNT INT;
	VERROR VARCHAR2(30);
    VCON_IDE CONTATOS.CON_IDE%TYPE;
    VEQP_IDE CONTATOS.CON_EQP_IDE%TYPE;
    VGRP_ORI P_AGENDAS.AGE_GRP_ORI%TYPE;
    VGRP_DES P_AGENDAS.AGE_GRP_DES%TYPE;
    VCRE_IDE P_AGENDAS.AGE_CRE_IDE%TYPE;
    VFLG_COR P_PROCESSOS.PRO_FLG_COR%TYPE;
    VCTR_IDE P_PROCESSOS.PRO_CTR_IDE%TYPE;
    VCAS_IDE P_PROCESSOS.PRO_CAS_IDE%TYPE;
    VCAS_TIP_IDE CASOS.CAS_TIP_IDE%TYPE;
    VTSR_IDE P_TP_AGENDAS.TAG_TSR_IDE%TYPE;
    VPROCESSO_CORRESPONDENTE INT;
    VAGC_VAL AGENDA_CORRESPONDENTE.AGC_VAL%TYPE;
  BEGIN
  
	--LOOP GERADO A PARTIR DE CADA SUBTIPO DE AGENDA
	
	--VERIFICA SE A NOVA DATA GERADA PELO SUBTIPO É VÁLIDA
	IF PFLG_AUT = 1 THEN
		VAGE_DTA_PRE := F_AGENDA_AUTOMATICA(PAGE_DTA, PSTA_IDE_ARRAY(v_contador));
		IF VAGE_DTA_PRE < TRUNC(CURRENT_DATE) THEN
			SELECT STA_DSC INTO VERROR FROM P_SUB_TP_AGENDAS WHERE STA_IDE = PSTA_IDE_ARRAY(v_contador); -- TROCAR O PSTA_IDE PELO SUBTIPOID DO LOOP
			RAISE_APPLICATION_ERROR(-20002,'Data inválida gerada pelo Sub-Tipo ' || VERROR);
		END IF;
	ELSE
		VAGE_DTA_PRE := PAGE_DTA;
	END IF;

	-- VERIFICA SE O DIA DA AGENDA É UM FERIADO
	SELECT COUNT(1)
	INTO   VCOUNT
	FROM   FERIADOS
	WHERE  FER_FFU_IDE = 0
	AND    FER_TPO = 'FIXO'
	AND    FER_DTA = PAGE_DTA;
	IF VCOUNT > 0 THEN
		RAISE_APPLICATION_ERROR(-20002,'-----#VALIDA_INCLUSAO-----');
	END IF;

	-- IDENTIFICA O CÓDIGO E A EQUIPE DO USUÁRIO
	SELECT MAX(CON.CON_IDE), MAX(CON.CON_EQP_IDE)
	INTO   VCON_IDE, VEQP_IDE
	FROM   CONTATOS CON
	WHERE  CON.CON_APE = USER
	AND    CON.CON_EMP_IDE = 7036
	AND    NVL(CON.CON_FLG_DEM,0) = 0
	AND    CON.CON_FLG_ATV = 1;

	-- IDENTIFICA O VALOR DO CAMPO "AGE_GRP_ORI"
	SELECT MAX(ARE.ARE_IDE)
	INTO   VGRP_ORI
	FROM   P_PERMISSOES PER
	INNER  JOIN P_AREAS ARE
	ON     ARE.ARE_IDE = PER.PER_ARE_IDE
	AND    ARE.ARE_FLG_ATV = 1
	WHERE  (PER.PER_CON_IDE = VCON_IDE OR PER.PER_EQP_IDE = VEQP_IDE)
	ORDER  BY PER.PER_FLG_ADM DESC, PER.PER_FLG_REV DESC
	,      PER.PER_FLG_ACP DESC, ARE.ARE_IDE;

	-- IDENTIFICA OS DADOS DO PROCESSO
	SELECT MAX(PRO_ARE_IDE), MAX(PRO_CRE_IDE), MAX(PRO_FLG_COR), MAX(PRO_CTR_IDE), MAX(PRO_CAS_IDE)
	INTO   VGRP_DES, VCRE_IDE, VFLG_COR, VCTR_IDE, VCAS_IDE
	FROM   P_PROCESSOS
	WHERE  PRO_IDE = PPRO_IDE
	AND    PRO_FLG_ATV = 1;

	-- IDENTIFICA AS CONFIGURAÇÕES DO TIPO DE AGENDAMENTO
	SELECT TAG_TSR_IDE
	INTO   VTSR_IDE
	FROM   P_TP_AGENDAS
	WHERE  TAG_IDE = PTAG_IDE
	AND    TAG_FLG_ATV = 1;

	SELECT SQ_P_AGENDAS.NEXTVAL INTO VAGE_IDE FROM DUAL;

	INSERT INTO P_AGENDAS
	(      AGE_IDE
	,      AGE_PRO_IDE
	,      AGE_DTA_BAS
	,      AGE_DTA_PRE, AGE_HOR_PRE
	,      AGE_TAG_IDE, AGE_DSC
	,      AGE_CON_IDE
	,      AGE_REV_IDE, AGE_REV_FLG
	,      AGE_GRP_ORI, AGE_GRP_DES
	,      AGE_FLG_PRI
	,      AGE_FLG_AUT
	,      AGE_FLG_REA
	,      AGE_CRE_IDE
	,      AGE_FLG_ATV, AGE_QEM_INC, AGE_QDO_INC, AGE_QEM, AGE_QDO, AGE_STA_IDE)
	VALUES
	(      VAGE_IDE
	,      PPRO_IDE
	,      PAGE_DTA
	,      VAGE_DTA_PRE
	,      PHOR_PRE
	,      PTAG_IDE
	,      PAGE_DSC
	,      PCON_IDE
	,      PREV_IDE
	,      CASE WHEN PREV_IDE > 0 THEN 1 ELSE 0 END
	,      NVL(VGRP_ORI,0)
	,      NVL(VGRP_DES,0)
	,      PFLG_PRI
	,      PFLG_AUT
	,      0
	,      VCRE_IDE
	,      1, USER, SYSDATE, USER, SYSDATE, PSTA_IDE_ARRAY(v_contador));

	-- SISTEMA DE CORRESPONDENTE
	IF VFLG_COR = 1 AND VCTR_IDE > 0 AND VTSR_IDE > 0 THEN

		-- VERIFICA SE O AGENDAMENTO JÁ EXISTE NO SISTEMA DE CORRESPONDENTE
		SELECT COUNT(1)
		INTO   VCOUNT
		FROM   AGENDA_CORRESPONDENTE
		WHERE  AGC_AGE_IDE = VAGE_IDE;

		IF NVL(VCOUNT,0) = 0 THEN

			-- VERIFICA SE O PROCESSO AINDA ESTÁ ATIVO NO SISTEMA DE CORRESPONDENTE
			SELECT COUNT(1)
			INTO   VPROCESSO_CORRESPONDENTE
			FROM   PROCESSO_CORRESPONDENTE
			WHERE  PCR_PRO_IDE = PPRO_IDE
			AND    PCR_DT_FIM_ACOMP IS NULL
			AND    TRUNC(SYSDATE) >= TRUNC(PCR_DT_ASSOCIACAO);
	
			IF VPROCESSO_CORRESPONDENTE > 0 THEN

				-- IDENTIFICA AS CONFIGURAÇÕES DO CASO DE FATURAMENTO DO PROCESSO
				SELECT MAX(CAS_TIP_IDE)
				INTO   VCAS_TIP_IDE
				FROM   CASOS
				WHERE  CAS_IDE = VCAS_IDE
				AND    CAS_FLG = 1;

				IF VCAS_TIP_IDE = 3 THEN
					-- IDENTIFICA O VALOR DO AGENDAMENTO
					VAGC_VAL := F_VALOR_AGENDA_CORRESPONDENTE(PPRO_IDE, VCTR_IDE, VTSR_IDE);
				END IF;

				-- INSERE O AGENDAMENTO NO SISTEMA DE CORRESPONDENTE
				INSERT INTO AGENDA_CORRESPONDENTE
				(      AGC_IDE
				,      AGC_AGE_IDE, AGC_DT_INCLUSAO, AGC_PRO_IDE
				,      AGC_DDB_IDE, AGC_DT_CONFIRM_EXEC
				,      AGC_CTR_IDE, AGC_DT_AGENDA
				,      AGC_VAL, AGC_FLG_REALOCACAO, AGC_TIP_IDE, AGC_HOR_AGE)
				VALUES
				(      SQ_AGENDA_CORRESPONDENTE.NEXTVAL
				,      VAGE_IDE, TRUNC(SYSDATE), PPRO_IDE
				,      NULL, NULL
				,      VCTR_IDE, PAGE_DTA
				,      VAGC_VAL, '0', VCAS_TIP_IDE, PHOR_PRE);

			END IF;

		END IF;

	END IF;

	OPEN PRETORNO FOR
	  SELECT VAGE_IDE AGE_IDE
	  FROM   DUAL;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
      RAISE_APPLICATION_ERROR(-20001, 'Erro: ' || SQLERRM);

  END SP_P_AGENDAS_INSERT_MULTIPLO;
